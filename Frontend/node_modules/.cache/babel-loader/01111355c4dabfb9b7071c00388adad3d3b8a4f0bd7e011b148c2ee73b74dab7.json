{"ast":null,"code":"var _jsxFileName = \"/Users/aravinth/Backendservice test/Frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css'; // Add a CSS file for styling\n\n// Static userId for now (could be dynamic in real-world scenarios)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst userId = '66df023961c74851a7c06b5b';\nconst App = () => {\n  _s();\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [tasks, setTasks] = useState([]);\n  const [taskToEdit, setTaskToEdit] = useState(null); // For editing a task\n  const [notification, setNotification] = useState(''); // For success/error notifications\n\n  // Fetch tasks when the component loads\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  // Function to fetch tasks from the API\n  const fetchTasks = async () => {\n    try {\n      const response = await axios.get(`http://localhost:9000/api/tasks?userId=${userId}`);\n      setTasks(response.data); // Assuming response.data contains an array of tasks\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n      setNotification('Error fetching tasks.');\n    }\n  };\n\n  // Function to handle task submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!title || !description) {\n      alert('Please fill out both fields');\n      return;\n    }\n    try {\n      if (taskToEdit) {\n        // Update an existing task\n        const response = await axios.put(`http://localhost:9000/api/tasks/${taskToEdit._id}`, {\n          title,\n          description,\n          userId\n        });\n        setTasks(tasks.map(task => task._id === response.data._id ? response.data : task));\n        setTaskToEdit(null); // Reset edit state\n        setNotification('Task updated successfully.');\n      } else {\n        // Add a new task\n        const response = await axios.post('http://localhost:9000/api/tasks', {\n          title,\n          description,\n          userId\n        });\n        setTasks([...tasks, response.data]);\n        setNotification('Task added successfully.');\n      }\n\n      // Clear the form fields\n      setTitle('');\n      setDescription('');\n    } catch (error) {\n      console.error('Error adding/updating task:', error);\n      setNotification('Error adding/updating task.');\n    }\n  };\n\n  // Function to delete a task with confirmation\n  const handleDelete = async taskId => {\n    if (!window.confirm('Are you sure you want to delete this task?')) {\n      return; // Exit if user cancels the confirmation\n    }\n    try {\n      await axios.delete(`http://localhost:9000/api/tasks/${taskId}`);\n      setTasks(tasks.filter(task => task._id !== taskId));\n      setNotification('Task deleted successfully.');\n    } catch (error) {\n      console.error('Error deleting task:', error);\n      setNotification('Error deleting task.');\n    }\n  };\n\n  // Function to toggle task status (completed/in-progress)\n  const toggleTaskStatus = async task => {\n    try {\n      const updatedStatus = task.status === 'in-progress' ? 'completed' : 'in-progress';\n      const response = await axios.put(`http://localhost:9000/api/tasks/${task._id}/status`, {\n        status: updatedStatus\n      });\n      setTasks(tasks.map(t => t._id === task._id ? {\n        ...t,\n        status: updatedStatus\n      } : t));\n      setNotification(`Task marked as ${updatedStatus}.`);\n    } catch (error) {\n      console.error('Error toggling task status:', error);\n      setNotification('Error updating task status.');\n    }\n  };\n\n  // Function to populate task form with data for editing\n  const handleEdit = task => {\n    setTitle(task.title);\n    setDescription(task.description);\n    setTaskToEdit(task);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Task Manager\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), notification && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notification\",\n      children: notification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: taskToEdit ? 'Edit Task' : 'Add Task'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Title\",\n        value: title,\n        onChange: e => setTitle(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Description\",\n        value: description,\n        onChange: e => setDescription(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: taskToEdit ? 'Update Task' : 'Add Task'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Tasks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"task-list\",\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"task-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: task.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 15\n        }, this), \" - \", task.description, \" - \", task.status, /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"task-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => toggleTaskStatus(task),\n            children: [\"Mark as \", task.status === 'in-progress' ? 'Completed' : 'In Progress']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleEdit(task),\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDelete(task._id),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 15\n        }, this)]\n      }, task._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No tasks available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"QJZhTeTlWgtZSjn8T3zuO2Frrxc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","userId","App","_s","title","setTitle","description","setDescription","tasks","setTasks","taskToEdit","setTaskToEdit","notification","setNotification","fetchTasks","response","get","data","error","console","handleSubmit","e","preventDefault","alert","put","_id","map","task","post","handleDelete","taskId","window","confirm","delete","filter","toggleTaskStatus","updatedStatus","status","t","handleEdit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","length","onClick","_c","$RefreshReg$"],"sources":["/Users/aravinth/Backendservice test/Frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css'; // Add a CSS file for styling\n\n// Static userId for now (could be dynamic in real-world scenarios)\nconst userId = '66df023961c74851a7c06b5b';\n\nconst App = () => {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [tasks, setTasks] = useState([]);\n  const [taskToEdit, setTaskToEdit] = useState(null); // For editing a task\n  const [notification, setNotification] = useState(''); // For success/error notifications\n\n  // Fetch tasks when the component loads\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  // Function to fetch tasks from the API\n  const fetchTasks = async () => {\n    try {\n      const response = await axios.get(`http://localhost:9000/api/tasks?userId=${userId}`);\n      setTasks(response.data); // Assuming response.data contains an array of tasks\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n      setNotification('Error fetching tasks.');\n    }\n  };\n\n  // Function to handle task submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!title || !description) {\n      alert('Please fill out both fields');\n      return;\n    }\n\n    try {\n      if (taskToEdit) {\n        // Update an existing task\n        const response = await axios.put(`http://localhost:9000/api/tasks/${taskToEdit._id}`, {\n          title,\n          description,\n          userId, \n        });\n        setTasks(tasks.map(task => task._id === response.data._id ? response.data : task));\n        setTaskToEdit(null); // Reset edit state\n        setNotification('Task updated successfully.');\n      } else {\n        // Add a new task\n        const response = await axios.post('http://localhost:9000/api/tasks', {\n          title,\n          description,\n          userId, \n        });\n        setTasks([...tasks, response.data]);\n        setNotification('Task added successfully.');\n      }\n\n      // Clear the form fields\n      setTitle('');\n      setDescription('');\n    } catch (error) {\n      console.error('Error adding/updating task:', error);\n      setNotification('Error adding/updating task.');\n    }\n  };\n\n  // Function to delete a task with confirmation\n  const handleDelete = async (taskId) => {\n    if (!window.confirm('Are you sure you want to delete this task?')) {\n      return; // Exit if user cancels the confirmation\n    }\n\n    try {\n      await axios.delete(`http://localhost:9000/api/tasks/${taskId}`);\n      setTasks(tasks.filter(task => task._id !== taskId));\n      setNotification('Task deleted successfully.');\n    } catch (error) {\n      console.error('Error deleting task:', error);\n      setNotification('Error deleting task.');\n    }\n  };\n\n  // Function to toggle task status (completed/in-progress)\n  const toggleTaskStatus = async (task) => {\n    try {\n      const updatedStatus = task.status === 'in-progress' ? 'completed' : 'in-progress';\n      const response = await axios.put(`http://localhost:9000/api/tasks/${task._id}/status`, { status: updatedStatus });\n      setTasks(tasks.map(t => t._id === task._id ? { ...t, status: updatedStatus } : t));\n      setNotification(`Task marked as ${updatedStatus}.`);\n    } catch (error) {\n      console.error('Error toggling task status:', error);\n      setNotification('Error updating task status.');\n    }\n  };\n\n  // Function to populate task form with data for editing\n  const handleEdit = (task) => {\n    setTitle(task.title);\n    setDescription(task.description);\n    setTaskToEdit(task);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Task Manager</h1>\n\n      {/* Notification */}\n      {notification && <div className=\"notification\">{notification}</div>}\n\n      {/* Task Form */}\n      <form onSubmit={handleSubmit}>\n        <h2>{taskToEdit ? 'Edit Task' : 'Add Task'}</h2>\n        <input\n          type=\"text\"\n          placeholder=\"Title\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Description\"\n          value={description}\n          onChange={(e) => setDescription(e.target.value)}\n        />\n        <button type=\"submit\">{taskToEdit ? 'Update Task' : 'Add Task'}</button>\n      </form>\n\n      {/* Task List */}\n      <h2>Tasks</h2>\n      {tasks.length > 0 ? (\n        <ul className=\"task-list\">\n          {tasks.map((task) => (\n            <li key={task._id} className=\"task-item\">\n              <strong>{task.title}</strong> - {task.description} - {task.status}\n              <div className=\"task-actions\">\n                <button onClick={() => toggleTaskStatus(task)}>\n                  Mark as {task.status === 'in-progress' ? 'Completed' : 'In Progress'}\n                </button>\n                <button onClick={() => handleEdit(task)}>Edit</button>\n                <button onClick={() => handleDelete(task._id)}>Delete</button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>No tasks available.</p>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}