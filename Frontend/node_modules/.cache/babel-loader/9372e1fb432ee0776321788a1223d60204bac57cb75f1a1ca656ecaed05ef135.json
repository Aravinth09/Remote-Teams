{"ast":null,"code":"var _jsxFileName = \"/Users/aravinth/Backendservice/Frontend/src/components/TaskManager.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskManager = ({\n  userId\n}) => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [status, setStatus] = useState('all'); // You can add filtering if needed\n\n  // Fetch tasks when the component loads or when userId changes\n  useEffect(() => {\n    if (userId) {\n      fetchTasks();\n    }\n  }, [userId]);\n\n  // Fetch tasks from the API\n  const fetchTasks = async () => {\n    try {\n      const response = await axios.get(`http://localhost:9000/api/users/${userId}/tasks`);\n      setTasks(response.data); // Assuming response.data contains an array of tasks\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n\n  // Handle task submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!title || !description) {\n      alert('Please fill out both fields');\n      return;\n    }\n    try {\n      const response = await axios.post('http://localhost:9000/api/tasks', {\n        title,\n        description,\n        userId // Use the passed userId prop\n      });\n\n      // Update the task list with the newly added task\n      setTasks([...tasks, response.data.task]);\n      setTitle(''); // Clear the title field\n      setDescription(''); // Clear the description field\n    } catch (error) {\n      console.error('Error adding task:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Title\",\n        value: title,\n        onChange: e => setTitle(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Description\",\n        value: description,\n        onChange: e => setDescription(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Tasks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), tasks.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: task.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this), \" - \", task.description]\n      }, task._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No tasks available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskManager, \"/XE0l3rn/5h04T+mdl2DcdGxZNc=\");\n_c = TaskManager;\nexport default TaskManager;\nvar _c;\n$RefreshReg$(_c, \"TaskManager\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","TaskManager","userId","_s","tasks","setTasks","title","setTitle","description","setDescription","status","setStatus","fetchTasks","response","get","data","error","console","handleSubmit","e","preventDefault","alert","post","task","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","length","map","_id","_c","$RefreshReg$"],"sources":["/Users/aravinth/Backendservice/Frontend/src/components/TaskManager.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst TaskManager = ({ userId }) => {\n  const [tasks, setTasks] = useState([]);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [status, setStatus] = useState('all'); // You can add filtering if needed\n\n  // Fetch tasks when the component loads or when userId changes\n  useEffect(() => {\n    if (userId) {\n      fetchTasks();\n    }\n  }, [userId]);\n\n  // Fetch tasks from the API\n  const fetchTasks = async () => {\n    try {\n      const response = await axios.get(`http://localhost:9000/api/users/${userId}/tasks`);\n      setTasks(response.data); // Assuming response.data contains an array of tasks\n    } catch (error) {\n      console.error('Error fetching tasks:', error);\n    }\n  };\n\n  // Handle task submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!title || !description) {\n      alert('Please fill out both fields');\n      return;\n    }\n\n    try {\n      const response = await axios.post('http://localhost:9000/api/tasks', {\n        title,\n        description,\n        userId, // Use the passed userId prop\n      });\n\n      // Update the task list with the newly added task\n      setTasks([...tasks, response.data.task]);\n      setTitle('');  // Clear the title field\n      setDescription('');  // Clear the description field\n    } catch (error) {\n      console.error('Error adding task:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h2>Add Task</h2>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Title\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Description\"\n          value={description}\n          onChange={(e) => setDescription(e.target.value)}\n        />\n        <button type=\"submit\">Add Task</button>\n      </form>\n\n      <h2>Tasks</h2>\n      {tasks.length > 0 ? (\n        <ul>\n          {tasks.map((task) => (\n            <li key={task._id}>\n              <strong>{task.title}</strong> - {task.description}\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>No tasks available.</p>\n      )}\n    </div>\n  );\n};\n\nexport default TaskManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}