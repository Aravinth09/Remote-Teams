{"ast":null,"code":"import axios from 'axios';\n\n// Axios instance for API requests\nconst api = axios.create({\n  baseURL: 'http://localhost:9000/api'\n});\nexport const getUsers = async () => {\n  return await api.get('/users/user');\n};\n\n// Add token to requests if available\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\nexport const getTasks = userId => api.get(`/tasks?userId=${userId}`);\nexport const addTask = taskData => api.post('/tasks', {\n  ...taskData,\n  priority: taskData.priority,\n  category: taskData.category\n});\nexport const updateTask = (taskId, updatedData) => api.put(`/tasks/${taskId}`, updatedData);\nexport const deleteTask = taskId => api.delete(`/tasks/${taskId}`);\nexport const loginUser = credentials => api.post('/users/login', credentials);\nexport const registerUser = userData => api.post('/users/register', userData);\n\n// Download the task report\nexport const downloadTaskReport = async () => {\n  try {\n    const response = await api.get('/tasks/report', {\n      responseType: 'blob' // Important for downloading files\n    });\n    const url = window.URL.createObjectURL(new Blob([response.data]));\n    const link = document.createElement('a');\n    link.href = url;\n    link.setAttribute('download', 'task_report.txt');\n    document.body.appendChild(link);\n    link.click();\n  } catch (error) {\n    console.error('Error downloading task report:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","api","create","baseURL","getUsers","get","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","getTasks","userId","addTask","taskData","post","priority","category","updateTask","taskId","updatedData","put","deleteTask","delete","loginUser","credentials","registerUser","userData","downloadTaskReport","response","responseType","url","window","URL","createObjectURL","Blob","data","link","document","createElement","href","setAttribute","body","appendChild","click","console"],"sources":["/Users/aravinth/Downloads/RemoteTeams copy/Frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Axios instance for API requests\nconst api = axios.create({\n    baseURL: 'http://localhost:9000/api',\n});\n\nexport const getUsers = async () => {\n    return await api.get('/users/user');\n};\n\n// Add token to requests if available\napi.interceptors.request.use(config => {\n    const token = localStorage.getItem('token');\n    if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n}, error => Promise.reject(error));\n\nexport const getTasks = (userId) => api.get(`/tasks?userId=${userId}`);\nexport const addTask = (taskData) => api.post('/tasks', { ...taskData, priority: taskData.priority, category: taskData.category });\nexport const updateTask = (taskId, updatedData) => api.put(`/tasks/${taskId}`, updatedData);\nexport const deleteTask = (taskId) => api.delete(`/tasks/${taskId}`);\nexport const loginUser = (credentials) => api.post('/users/login', credentials);\nexport const registerUser = (userData) => api.post('/users/register', userData);\n\n// Download the task report\nexport const downloadTaskReport = async () => {\n    try {\n        const response = await api.get('/tasks/report', {\n            responseType: 'blob',  // Important for downloading files\n        });\n        const url = window.URL.createObjectURL(new Blob([response.data]));\n        const link = document.createElement('a');\n        link.href = url;\n        link.setAttribute('download', 'task_report.txt');\n        document.body.appendChild(link);\n        link.click();\n    } catch (error) {\n        console.error('Error downloading task report:', error);\n        throw error;\n    }\n};\n\n\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACrBC,OAAO,EAAE;AACb,CAAC,CAAC;AAEF,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAA,KAAY;EAChC,OAAO,MAAMH,GAAG,CAACI,GAAG,CAAC,aAAa,CAAC;AACvC,CAAC;;AAED;AACAJ,GAAG,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EACnC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACPD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EACpD;EACA,OAAOD,MAAM;AACjB,CAAC,EAAEM,KAAK,IAAIC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAAC;AAElC,OAAO,MAAMG,QAAQ,GAAIC,MAAM,IAAKlB,GAAG,CAACI,GAAG,CAAC,iBAAiBc,MAAM,EAAE,CAAC;AACtE,OAAO,MAAMC,OAAO,GAAIC,QAAQ,IAAKpB,GAAG,CAACqB,IAAI,CAAC,QAAQ,EAAE;EAAE,GAAGD,QAAQ;EAAEE,QAAQ,EAAEF,QAAQ,CAACE,QAAQ;EAAEC,QAAQ,EAAEH,QAAQ,CAACG;AAAS,CAAC,CAAC;AAClI,OAAO,MAAMC,UAAU,GAAGA,CAACC,MAAM,EAAEC,WAAW,KAAK1B,GAAG,CAAC2B,GAAG,CAAC,UAAUF,MAAM,EAAE,EAAEC,WAAW,CAAC;AAC3F,OAAO,MAAME,UAAU,GAAIH,MAAM,IAAKzB,GAAG,CAAC6B,MAAM,CAAC,UAAUJ,MAAM,EAAE,CAAC;AACpE,OAAO,MAAMK,SAAS,GAAIC,WAAW,IAAK/B,GAAG,CAACqB,IAAI,CAAC,cAAc,EAAEU,WAAW,CAAC;AAC/E,OAAO,MAAMC,YAAY,GAAIC,QAAQ,IAAKjC,GAAG,CAACqB,IAAI,CAAC,iBAAiB,EAAEY,QAAQ,CAAC;;AAE/E;AACA,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC1C,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMnC,GAAG,CAACI,GAAG,CAAC,eAAe,EAAE;MAC5CgC,YAAY,EAAE,MAAM,CAAG;IAC3B,CAAC,CAAC;IACF,MAAMC,GAAG,GAAGC,MAAM,CAACC,GAAG,CAACC,eAAe,CAAC,IAAIC,IAAI,CAAC,CAACN,QAAQ,CAACO,IAAI,CAAC,CAAC,CAAC;IACjE,MAAMC,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACxCF,IAAI,CAACG,IAAI,GAAGT,GAAG;IACfM,IAAI,CAACI,YAAY,CAAC,UAAU,EAAE,iBAAiB,CAAC;IAChDH,QAAQ,CAACI,IAAI,CAACC,WAAW,CAACN,IAAI,CAAC;IAC/BA,IAAI,CAACO,KAAK,CAAC,CAAC;EAChB,CAAC,CAAC,OAAOpC,KAAK,EAAE;IACZqC,OAAO,CAACrC,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAMA,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}